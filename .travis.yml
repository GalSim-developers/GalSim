branches:
    only:
        - master
        - releases/2.2

language: python
python:
    - 2.7
    - 3.5
    - 3.6

compiler:
    - g++

matrix:
    # cf. https://blog.travis-ci.com/2019-08-07-extensive-python-testing-on-travis-ci
    include:
        # Add 3.7 builds by hand.  This is the officially supported method for now.
        - python: 3.7
          dist: xenial
          sudo: true
          name: "Python 3.7"

        # Add a linux build with clang
        - python: 3.6
          env:
            - COMPILER=clang
            - CC=clang
            - CXX=clang++
            - LD_LIBRARY_PATH=/usr/local/clang/lib:$LD_LIBRARY_PATH
          name: "Linux clang (Python 3.6)"

        # Add a couple macos builds
        - os: osx
          osx_image: xcode10.2  # Has python 3.7.3
          language: shell
          name: "OSX (Python 3.7)"

        - os: osx
          osx_image: xcode9.4  # Has python 3.6.5
          language: shell
          name: "OSX (Python 3.6)"

        - os: osx
          osx_image: xcode9.3  # Has python 2.7.14_2
          language: shell
          name: "OSX (Python 2.7)"

before_install:
    - export PATH=$(echo $PATH | tr ':' "\n" | sed '/\/opt\/python/d' | tr "\n" ":" | sed "s|::|:|g")
    - if [[ $TRAVIS_OS_NAME == "linux" ]]; then sudo apt-get -qq update; sudo apt-get install -y python-dev libfftw3-dev libav-tools libeigen3-dev; fi
    - if [[ $TRAVIS_OS_NAME" == "osx" ]]; then brew update; brew install fftw libav eigen; fi

    # List current contents of directories that should be being cached.
    - ls -l $HOME
    - if test -d $HOME/des_data; then ls -l $HOME/des_data; fi

    # Get the des data needed for the check_des test.
    - if ! test -d $HOME/des_data || ! test -f $HOME/des_data/DECam_00154912_01.fits.fz; then wget http://www.sas.upenn.edu/~mjarvis/des_data.tar.gz; tar xfz des_data.tar.gz -C $HOME --wildcards *_01*; fi
    - ln -s $HOME/des_data examples/des/

    # On OSX, need to use pip3, not pip and python3, not python
    - if [[ $TRAVIS_OS_NAME == "osx" && $TRAVIS_PYTHON_VERSION > 3 ]]; then alias pip=pip3; alias python=python3; fi

cache:
    ccache: true
    pip: true
    directories:
        - $HOME/des_data

install:
    # Install the requirements
    # Use -U to make sure we get the latest versions of everything so we notice any
    # incompatibilities as soon as possible.
    - pip install -U -r requirements.txt

    # Also some things just required for tests
    # (This includes scipy, which can take a while to install.  So tell Travis to be patient.)
    - travis_wait 30 pip install -U -r test_requirements.txt
    # astroplan isn't available on 2.7
    - if [[ $TRAVIS_PYTHON_VERSION > 3.0 ]]; then pip install astroplan; fi

    # Note: matplotlib is only required because starlink has an `import matplotlib` in their
    # code, despite that not being a dependency.
    - pip install matplotlib

    # Finally, a few things for the code coverage
    - pip install nose codecov coveralls coverage

    - pip list

script:
    # Install GalSim
    - python setup.py install

    # If galsim_download_cosmos.py changed, then run it.
    - echo $TRAVIS_COMMIT_RANGE
    - if git --no-pager diff $TRAVIS_COMMIT_RANGE --name-only | grep -Fxq 'galsim/download_cosmos.py'; then galsim_download_cosmos -s 23.5 -v1; fi

    - cd tests

    # Use this rather than setup.py test, so we can get the coverage options.
    - "nosetests test*.py --with-coverage --cover-package=galsim --with-doctest --cover-erase"
    # Without cover-erase, this will append to the .coverage file
    - "nosetests run_examples.py --with-coverage --cover-package=galsim --with-doctest"

after_success:
    # The multiprocessing stages don't get properly incorporated into the .coverage file unless
    # we do this command.  (Some of the .coverage.* files are in the ../examples directory.)
    - coverage combine . ../examples ../examples/great3 ../examples/des
    - coverage xml

    # Send results to coveralls and codecov
    - coveralls
    - codecov

before_cache:
    - rm -rfv $HOME/.cache/pip/log
    - rm -rfv $HOME/.cache/pip/http
