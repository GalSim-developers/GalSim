branches:
    only:
        - master
        - /^releases\/.*/

language: python

compiler:
    - g++

matrix:
    # cf. https://blog.travis-ci.com/2019-08-07-extensive-python-testing-on-travis-ci
    include:
        # Basic python on linux
        - python: 2.7
          dist: xenial
          name: "Python: 2.7"

        - python: 3.5
          dist: xenial
          name: "Python: 3.5"

        - python: 3.6
          dist: xenial
          name: "Python: 3.6"

        - python: 3.7
          dist: xenial
          name: "Python: 3.7"
          env:
            - __U=-U  # Only update packages on python 3.7+

        - python: 3.8
          dist: xenial
          name: "Python: 3.8"
          env:
            - __U=-U

        # Note: All the rest are technically allowed to fail.  This is mostly so the
        # Travis runs can finish faster, since they often only do 4 at a time.
        # But we should periodically check them and try to make sure they all work.

        # Add a linux build with clang
        - python: 3.6
          env:
            - COMPILER=clang
            - CC=clang
            - CXX=clang++
            - LD_LIBRARY_PATH=/usr/local/clang/lib:$LD_LIBRARY_PATH
          name: Linux clang (Python 3.6)

        # Add a few macos builds
        # Here, the python version is set by the xcode version.
        - os: osx
          osx_image: xcode9.3  # Has python 2.7.14_2
          language: shell  # language: python is an error on macos
          env:
            - TRAVIS_PYTHON_VERSION=2.7
            # Note: Use --user to supersede existing versions rather than sudo pip ...
            #       since existing versions of some packages (e.g. numpy) live in /System/
            #       directory where delete operations are forbidden.
            - __USER=--user
            - __USER2=--user
            - PATH=/Users/travis/Library/Python/2.7/bin:$PATH
          name: OSX (Python 2.7)

        # XCode 9.4 has a problem with pip regarding the SSL link to pypi and other places.
        # Errors look like:
        #     pip is configured with locations that require TLS/SSL, however the ssl module in Python is not available.
        #     Retrying (Retry(total=4, connect=None, read=None, redirect=None, status=None)) after connection broken by 'SSLError("Can't connect to HTTPS URL because the SSL module is not available.",)': /simple/setuptools/
        #     Could not fetch URL https://pypi.org/simple/setuptools/: There was a problem confirming the ssl certificate: HTTPSConnectionPool(host='pypi.org', port=443): Max retries exceeded with url: /simple/setuptools/ (Caused by SSLError("Can't connect to HTTPS URL because the SSL module is not available.",)) - skipping
        # I (MJ) tried for a while to get it to work and was unsuccessful.
        # cf. commits 3d2819b through 23256a8
        # If anyone wants to give it a try at some point, feel free, but I'm giving up.  :(
        #- os: osx
        #  osx_image: xcode9.4  # Has python 3.6.5
        #  language: shell
        #  env:
        #    - TRAVIS_PYTHON_VERSION=3.6
        #  name: OSX (Python 3.6)

        - os: osx
          osx_image: xcode11  # Has python 3.7.4
          language: shell
          env:
            - TRAVIS_PYTHON_VERSION=3.7
            # This one doesn't have problems with /System stuff, but one of the dependencies
            # wants to write into /usr/local/man.  So use --user to avoid that.
            - __USER=--user
            - PATH=/Users/travis/Library/Python/3.7/bin:$PATH
            - __U=-U
          name: OSX (Python 3.7)

        # Check 3.9-dev, but less concerned if this fails.
        - python: 3.9-dev
          dist: xenial
          name: "Python: 3.9-dev"
          env:
            - __U=-U

        # For grins, add pypy.
        # So far this is limited by astropy not working on pypy yet.
        - python: pypy3
          name: PyPy
          env:
            - __U=-U

    allow_failures:
        - name: Linux clang (Python 3.6)
        - os: osx
        - python: 3.5  # These work, but let them fail so we get the results we care about sooner.
        - python: 3.8
        - python: 3.9-dev
        - python: pypy3
    fast_finish: true


before_install:
    - export PATH=$(echo $PATH | tr ':' "\n" | sed '/\/opt\/python/d' | tr "\n" ":" | sed "s|::|:|g")
    # Install the non-python dependencies: fftw, libav, eigen
    - if [[ $TRAVIS_OS_NAME == "linux" ]]; then sudo -H apt-get -qq update; sudo -H apt-get install -y python-dev libfftw3-dev libeigen3-dev; fi
    # Shouldn't usually need this, but occasionally might.
    - if [[ $TRAVIS_OS_NAME == "osx" ]]; then brew update; fi
    - if [[ $TRAVIS_OS_NAME == "osx" ]]; then brew install fftw eigen; fi
    - if [[ $TRAVIS_OS_NAME == "osx" ]]; then brew cask install gfortran; fi
    - if [[ $TRAVIS_OS_NAME == "osx" ]]; then brew upgrade wget; fi
    - if [[ $TRAVIS_OS_NAME == "osx" ]]; then brew link --overwrite fftw eigen gcc; fi

    # Only need this for the mpeg tests, which we don't do on 2.7
    - if [[ $TRAVIS_OS_NAME == "linux" && $TRAVIS_PYTHON_VERSION > 3.5 ]]; then sudo -H apt-get install -y libav-tools; fi
    - if [[ $TRAVIS_OS_NAME == "osx" && $TRAVIS_PYTHON_VERSION > 3.5 ]]; then brew install libav; brew link --overwrite libav; fi

    # List current contents of directories that should be being cached.
    - ls -l $HOME
    - if test -d $HOME/des_data; then ls -l $HOME/des_data; fi

    # Get the des data needed for the check_des test.
    # Note: --wildcards is invalid on Mac, but allowing wildcards is the default.
    - __WILDCARDS=$([[ $TRAVIS_OS_NAME = "linux" ]] && echo "--wildcards" || echo "")
    - if ! test -d $HOME/des_data || ! test -f $HOME/des_data/DECam_00154912_01.fits.fz; then wget --no-check-certificate http://www.sas.upenn.edu/~mjarvis/des_data.tar.gz; tar xfz des_data.tar.gz -C $HOME $__WILDCARDS *_01*; fi
    - ln -s $HOME/des_data examples/des/

    # Try to fix old pip on osx 2.7: https://github.com/pypa/pip/issues/5253
    - if [[ $TRAVIS_OS_NAME == "osx" && $TRAVIS_PYTHON_VERSION < 3.0 ]]; then sudo python -m pip install -U pip; fi

    # On OSX, need to use pip3, not pip and python3, not python
    - if [[ $TRAVIS_OS_NAME == "osx" && $TRAVIS_PYTHON_VERSION > 3.0 ]]; then export PIP=pip3; export PYTHON=python3; else export PIP=pip; export PYTHON=python; fi
    - $PIP --version
    - $PYTHON --version

cache:
    ccache: true
    pip: true
    directories:
        - $HOME/des_data
        - $HOME/Library/Caches/Homebrew
        - /usr/local/Cellar/

install:
    # Upate pip executable.  (Needs sudo on some systems.)
    - sudo -H $PIP install $__U pip

    # Install the requirements
    # Use -U to make sure we get the latest versions of everything so we notice any
    # incompatibilities as soon as possible.  (Only on python 3.7 now.)
    - $PIP install -U $__USER numpy      # Do these three first to clarify potential conflicts.
    - $PIP install -U $__USER setuptools
    - $PIP install -U $__USER wheel
    - $PIP install $__U $__USER -r requirements.txt

    # Also some things just required for tests
    - $PIP install $__U $__USER -r test_requirements.txt

    # On Travix OSX, nose is already installed, but nosetests isn't in the path.
    # So we need to force it to reinstall, which puts nosetests in /usr/local/bin/
    - if [[ $TRAVIS_OS_NAME == "osx" ]]; then sudo -H $PIP install --force $__USER -v nose; fi

    # Finally, a few things for the code coverage
    - $PIP install $__U $__USER nose codecov coverage

    # A few things we only bother with on py >= 3.6
    - if [[ $TRAVIS_PYTHON_VERSION > 3.5 ]]; then $PIP install $__U $__USER pandas starlink-pyast matplotlib astroplan; fi

    - $PIP list

script:
    # Install GalSim
    - $PYTHON setup.py install $__USER2

    # If galsim_download_cosmos.py changed, then run it. (Just on 3.6.)
    - echo $TRAVIS_COMMIT_RANGE
    - if [[ $TRAVIS_PYTHON_VERSION == 3.6 ]]; then if git --no-pager diff $TRAVIS_COMMIT_RANGE --name-only | grep -Fxq 'galsim/download_cosmos.py'; then galsim_download_cosmos -s 23.5 -v1; fi; fi

    - cd tests

    # Use this rather than setup.py test, so we can get the coverage options.
    - nosetests test*.py --with-coverage --cover-package=galsim --with-doctest --cover-erase

    - nosetests run_examples.py

after_success:
    # Send results to codecov
    - codecov

before_cache:
    - rm -rfv $HOME/.cache/pip/log
    - rm -rfv $HOME/.cache/pip/http
    - if [[ $TRAVIS_OS_NAME == "osx" ]]; then brew cleanup; fi
