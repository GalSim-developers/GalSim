# Copyright 2012, 2013 The GalSim developers:
# https://github.com/GalSim-developers
#
# This file is part of GalSim: The modular galaxy image simulation toolkit.
#
# GalSim is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# GalSim is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with GalSim.  If not, see <http://www.gnu.org/licenses/>
#
#
# Demo #10
#
# The tenth YAML configuration file in our tutorial about using Galsim config files
# (This file is designed to be viewed in a window 100 characters wide.)
#
# This script uses both a variable PSF and variable shear, taken from a power spectrum, along
# the lines of a Great10 (Kitching, et al, 2012) image.  The galaxies are placed on a grid
# (10 x 10 in this case, rather than 100 x 100 in the interest of time.)  Each postage stamp
# is 48 x 48 pixels.  Instead of putting the PSF images on a separate image, we package them
# as the second HDU in the file.  For the galaxies, we use a random selection from 5 specific
# RealGalaxy objects, selected to be 5 particularly irregular ones.  (These are taken from 
# the same catalog of 100 objects that demo6 used.)  The galaxies are oriented in a ring 
# test (Nakajima & Bernstein 2007) of 20 each.
#
# New features introduced in this demo:
#
# - obj type : Ring (..., full_rotation)
# - obj type : RealGalaxy (..., id)
# - type : Eval using sky_pos variable, user-defined variables and math functions
# - top level field eval_variables
# - shear_value : PowerSpectrumShear 
# - pos_value : RTheta (r, theta)
# - image type : Tiled (..., order)
# - image.psf : real_space
# - input : power_spectrum (e_power_function, b_power_function)
# - output.psf : hdu
#

# Define the PSF profile
psf : 
    type : Gaussian
    fwhm : 
        # We saw the Eval type before (in demo3.yaml) as a way to do simple arithmetic.
        # It becomes much more powerful when you include variables in your equation.
        # One variable that is usable is `sky_pos`, which is the position of the current 
        # object "on the sky" relative to the center of the image in arcsec. 
        # This lets you define any arbitrary function for a particular variable in terms of (x,y).
        # For a list of the other GalSim-privided variables, see 
        # https://github.com/GalSim-developers/GalSim/wiki/Config-Documentation
        type : Eval
        str : '0.9 + 0.5 * (sky_pos.x**2 + sky_pos.y**2) / 100**2'  # 0.9 + 0.5 * (r/100 arcsec)^2

    ellip:
        type : EBeta
        e : 
            type : Eval
            # We also allow any number of user-defined variables.
            # The first letter of the variable name indicates what type it is expected to be:
            #     f = float
            #     i = int
            #     b = bool
            #     s = string
            #     a = Angle
            #     p = Position
            #     g = Shear
            fr : { type : Eval , str : '(sky_pos.x**2 + sky_pos.y**2)**0.5' } # float variable: r
            # Now we can use this variable (without the first letter) in our string:
            str : '0.4 * (r/100)**1.5'   # large value at the edge, so visible by eye.
        beta:
            type : Eval
            # And you can also use anything in the Python math module:
            # This makes the PSF shapes have a tangential pattern
            str : '(math.atan2(sky_pos.y,sky_pos.x) + math.pi/2.) * galsim.radians' 


# Define the galaxy profile
gal :
    type : Ring

    # Last time we used Ring (demo5), we had num=2 to make pairs of 90 degree rotated
    # galaxies.  This example is more like a typical ring test where the same galaxy profile
    # is drawn at many orientations stepped uniformly in angle, making a ring in e1-e2 space.
    num : &num_in_ring 20

    first :
        type : RealGalaxy
        id : 
            type : List
            items : [ 106416, 106731, 108402, 116045, 116448 ]
            # Because this is in a Ring, the "first" item only gets accessed every 20 objects.
            # However, all sequences are indexed by the overall object number, so in order to 
            # step through this sequence once for each time into the "first" item, we need
            # to set index to repeat 20 times before moving on to the next item.
            # We again use the convenient YAML variable name notation to do so.
            index : { type : Sequence , repeat : *num_in_ring }

        # Make the galaxies a factor of 3 larger (in linear size, not area) than their
        # original observed size.
        dilation : 3

    # If your underlying galaxy (defined in first) has rotational symmetry (e.g. a sheared 
    # exponential profile), then you would typically want the full rotation spanned by the 
    # ring test to be 180 degrees.  However, in this case, the underlying real galaxies
    # do not have this symmetry.  So we want the ring to span a full rotation of 360 degrees.
    full_rotation : 360 deg

    shear : 
        # For this demo, we use shears drawn from a power spectrum P(k) = k^1.8.
        # The power spectrum is set up below using input : power_spectrum.  See below.
        type : PowerSpectrumShear

    shift : 
        type : RTheta
        # Half a pixel in a random direction
        # This time, we use the pixel_scale variable defined in eval_variables (below), 
        # so we don't need to define it here.
        r : { type : Eval , str : 'pixel_scale * 0.5' }
        theta : { type : Random }

    signal_to_noise : 100


# Anything defined in eval_variables will be available for all Eval commands, so you don't 
# have to repeat them for each one.  This is most useful when the same variable is used 
# in multiple places.  In this case, we use the pixel_scale for the shift above, and also
# as a trivial evaluation for the image pixel_scale below.
eval_variables :
    fpixel_scale : 0.44  # arcsec / pixel


# Define some other information about the images 
image :
    # Note: The corresponding python script, demo10.py, is only done using a single process
    # to make it a little easier to follow the GalSim code.  See demo9.py for an example of
    # how to do this with multiple processes.
    nproc : 5

    type : Tiled
    nx_tiles : 10
    ny_tiles : 10

    stamp_size : 48  # pixels

    # image type = Tiled has an optional field called "order".
    # The default order in which to place the tiles is row-based: order = 'row'. 
    # i.e. First the bottom row, then the next one up, and so on until the top row. 
    # Other options for the order parameters are 'column' and 'random'.
    # order = 'column' specifies to start with the left column and proceeding to the right 
    # order = 'random' specifies to place the postage stamps in a random order.
    # We use 'random' here so the ring test galaxies don't appear in order along the rows.
    order : 'random'

    pixel_scale : { type : Eval , str : 'pixel_scale' }

    noise :
        sky_level : 1.e6  # ADU / arcsec^2

    # The random seed is used for both the power spectrum realization and the random 
    # properties of the galaxies.
    random_seed : 3339201


# Define the input files
input :
    # In this case, we need to define where the real galaxy input catalog is.
    real_catalog :
        dir : data
        file_name : real_galaxy_catalog_example.fits
        preload : False   # Not so important this time, since only using 5 items in the catalog.

    # We also initialize the power spectrum here.
    # There are two possible attributes for a power_spectrum: e_power_function and 
    # b_power_function.  You must specify at least one of them.
    # They are each strings that define a function of k.
    power_spectrum :
        e_power_function : 'k**1.8'
        # In this case we leave off b_power_function, so it is taken to be 0.


# Define the names and format of the output files
output :

    dir : output_yaml
    file_name : power_spectrum.fits

    # Put the PSF image in hdu=1 (the first extension after the primary HDU)
    psf : 
        hdu : 1
        # We use real space convolution to avoid some of the 
        # artifacts that can show up with Fourier convolution.
        # The level of the artifacts is quite low, but when drawing with
        # no noise, they are apparent with ds9's zscale viewing.
        real_space : True
