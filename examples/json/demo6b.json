{
"#" : "Demo #6",
  
"#" : "The sixth JSON configuration file in our tutorial about using Galsim config files",
"#" : "(This file is designed to be viewed in a window 100 characters wide.)",
  
"#" : "This script uses real galaxy images from COSMOS observations.  The catalog of real galaxy",
"#" : "images distributed with GalSim only includes 100 galaxies, but you can download a much",
"#" : "larger set of images.  See https://github.com/GalSim-developers/GalSim/wiki for a link",
"#" : "to the download page.",

"#" : "The galaxy images include images of the effective PSF for the original observations, ",
"#" : "so GalSim considers the galaxy profile to be the observed image deconvolved by that PSF.",
"#" : "In this case, we then randomly rotate the galaxies, apply a given gravitational shear as ",
"#" : "well as gravitational magnification, and then finally convolve by a double Gaussian PSF.",
"#" : "The final image can of course have any pixel scale, not just that of the original images.",
"#" : "The output for this script is to a FITS data cube.  With DS9, this can be viewed with a",
"#" : "slider to quickly move through the different images.",
       
"#" : "New features introduced in this demo:",

"#" : "- input : real_catalog (file_name, image_dir, preload)",
"#" : "- obj type : RealGalaxy (index)",
"#" : "- obj : rotate ",
"#" : "- obj : magnify",
"#" : "- image : sky_level",
"#" : "- value type : Sequence",
"#" : "- output type : DataCube (file_name, dir, nimages)",
"#" : "- Using JSON's multiple document feature to do more than one thing",

"#" : "For this example, we actually have two config files, since we have two different kinds",
"#" : "of output files to make.  The first, demo6a.json is for the PSF output,",
"#" : "and the second, demo6b.json is for the convolved galaxy images.",
"#" : "Out JSON parser can take multiple input files on the command line, and will run all",
"#" : "of them.",

"#" : "Define what kind of PSF to use",
"psf" : {
    "type" : "Sum",
    "items" : [
        { "type" : "Gaussian", "fwhm" : 0.6, "flux" : 0.8 },
        { "type" : "Gaussian", "fwhm" : 2.3, "flux" : 0.2 }
    ]
},

"gal" : {
    "type" : "RealGalaxy",
    "flux" : 1e5,

    "index" : {
        "type" : "Sequence",
        "#" : "Sequence can optionally take first, last, and step, however, the defaults ",
        "#" : "are fine here: ",
        "#" : "  first = 0",
        "#" : "  last = <num entries in catalog> - 1",
        "#" : "  step = 1",
        "#" : "If the sequential values exceed last, they will repeat starting at first, so it's",
        "#" : "ok to have nobjects greater than the number of real galaxies in the catalog."
    },
    
    "rotate" : {
        "type" : "Random"
    },

    "shear" : {
        "type" : "G1G2",
        "g1" : -0.027,
        "g2" : 0.031
    },

    "#" : "Also apply a magnification mu = ( (1-kappa)^2 - |gamma|^2 )^-1",
    "#" : "This conserves surface brightness, so it scales both the size and flux.",
    "magnify" : 1.082
},

"#" : "Define some other information about the images ",
"image" : {
    "pixel_scale" : 0.15,

    "#" : "If we specify the sky_level as an image attribute, it will be used",
    "#" : "as a background level for the image.  (The background level per pixel is", 
    "#" : "1.e6 * (0.15)^2 = 2250.)",
    "sky_level" : 1e6,

    "#" : "Since we already specified a sky_level for the whole image, we don't need",
    "#" : "to repeat it for the noise.  So in fact, everything is default here.",
    "#" : "So we can just set the noise to an empty dictionary, which means use all defaults.",
    "#" : "(If we omit it entirely, that would mean no noise, which isn't what we want.)",

    "#" : "Also, if we include a sky_level in noise in addition to the above image sky_level,",
    "#" : "then both of them (added together) will be used for the noise, but only the ",
    "#" : "image.sky_level will remain as the background level in the final image.",
    "noise" : {},

    "#" : "Define the initial random number seed",
    "random_seed" : 1512413,

    "#" : "Note: since the output includes a data_cube output, which requires all the",
    "#" : "images to be the same size, GalSim will choose the size of the first image",
    "#" : "automatically from the profile (since we aren't setting any image : size here),",
    "#" : "but then subsequent images will be forced to be the same size as the first one."
},

"#" : "Define the input files",
"input" : {
    "#" : "In this case, we need to define where the real galaxy input catalog is.",
    "real_catalog" : {
        "image_dir" : "data",
        "file_name" : "real_galaxy_catalog_example.fits",

	"#" : "This usually makes a big improvement in speed",
        "preload" : true
    }
},

"#" : "Define the name and format of the output file",
"output" : {
    "type" : "DataCube",
    "dir" : "output_json",
    "file_name" : "cube_real.fits",
    "nimages" : 100
}
 
}
