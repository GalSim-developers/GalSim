{
"#" : "Demo #11",

"#" : "The eleventh JSON configuration file in our tutorial about using Galsim config files.",
"#" : "(This file is designed to be viewed in a window 100 characters wide.)",

"#" : "This script uses a constant PSF from real data (an image read in from a bzipped FITS file, ",
"#" : "not a parametric model) and variable shear and magnification according to some cosmological ",
"#" : "model for which we have a tabulated power spectrum at specific k values only.  The 288 ",
"#" : "galaxies in the 0.2 x 0.2 degree field (representing a low number density of 2/arcmin^2) ",
"#" : "are randomly located and permitted to overlap, but we do take care to avoid being too close ",
"#" : "to the edge of the large image.  For the galaxies, we use a random selection from 5 ",
"#" : "specific RealGalaxy objects, selected to be 5 particularly irregular ones. These are taken ",
"#" : "from the same catalog of 100 objects that demo6 used.",

"#" : "The noise added to the image is spatially correlated in the same way as often seen in ", 
"#" : "coadd images from the Hubble Space Telescope (HST) Advanced Camera for Surveys, using a ",
"#" : "correlation function determined from the HST COSMOS coadd images in the F814W filter ",
"#" : "(see, e.g., Leauthaud et al 2007).  Applying this noise uses an FFT of the size of the ",
"#" : "full output image: this may cause memory-related slowdowns in systems with less than 2GB ",
"#" : "RAM.",

"#" : "New features introduced in this demo:",

"#" : " - obj type : InterpolatedImage(image, dx) ",
"#" : " - float_value type : RandomDistribution(function, x_min, x_max) ",
"#" : " - pix type : None ",
"#" : " - input.power_spectrum : (e_power_file, delta2, units) ",
"#" : " - noise type : COSMOS ",
"#" : " - image.index_convention : (0 or 'C' or 'python') vs (1 or 'Fortran' or 'FITS')",

"#" : " - Power spectrum shears and magnifications for non-gridded positions.",
"#" : " - Reading a compressed FITS image (using BZip2 compression).",
"#" : " - Writing a compressed FITS image (using Rice compression).",

"#" : "Define the PSF profile",
"psf" : {
    "#" : "We introduce here a new way to describe a profile.  We can use an image from a fits",
    "#" : "file and interpolate between the pixels with type = InterpolatedImage.",
    "type" : "InterpolatedImage",
    
    "#" : "The only required parameter is the name of the file with the image.  Note: the file is ",
    "#" : "bzipped, to demonstrate the new capability of reading in a file that has been ",
    "#" : "compressed in various ways (which GalSim can infer from the filename).",
    "image" : "../examples/data/example_sdss_psf_sky0.fits.bz2",

    "#" : "If the fits file has a scale given in the header information, we can use that for ",
    "#" : "the pixel scale.  If it is not given it will assume 1. ",
    "#" : "Or we can also override that by providing an explicit pixel scale here.",
    "#" : "This file is a real SDSS PSF, which means pixel scale of 0.396 arcsec.  However, the ",
    "#" : "typical seeing is 1.2 arcsec and we want to simulate better seeing, so we will just ",
    "#" : "tell GalSim that the pixel scale is 0.2 arcsec to match our image : pixel_scale below.",
    "dx" : 0.2
},
 
"#" : "Define the pixel profile",
"pix" : {
    "#" : "Normally, we don't include the pix item, since we just use the default pixel, which is ",
    "#" : "a square box with sides equal to the pixel scale (defined as image.pixel_scale).",
    "#" : "However, in this case, the psf already includes the convolution with the pixel, so we",
    "#" : "don't want to put it in again.  There is a special type : None to account for this",
    "#" : "case, which means to not use any pixel, rather than use the default.",
    "type" : "None"
},

"#" : "Define the galaxy profile",
"gal" : {
    "type" : "RealGalaxy",
    "id" : {
        "#" : "We select randomly among these 5 IDs.",
        "type" : "List",
        "items" : [ 106416, 106731, 108402, 116045, 116448 ],
        "index" : { "type" : "Random" }
    },

    "shear" : {
        "#" : "We again use PowerSpectrumShear, which is set up below using input:power_spectrum.",
        "type" : "PowerSpectrumShear"
    },

    "magnification" : {
        "#" : "We use PowerSpectrumMagnification for this, which is set up below using input :",
        "#" : "power_spectrum.",
        "type" : "PowerSpectrumMagnification"
    },

    "dilation" : {
        "#" : "We draw the sizes from a power law distribution.",
        "#" : "You can use any arbitrary function here, along with a min and max value,",
        "#" : "and values will be drawn within this probability distribution.",
        "#" : "The function should be given in terms of the variable x, since internally",
        "#" : "it is parsed with eval('lambda x : ' + function).",
        "type" : "RandomDistribution",
        "function" : "x**-3.5",
        "x_min" : 1,
        "x_max" : 5
    },

    "rotation" : {
        "type" : "Random"
    },

    "#" : "The galaxy S/N is set to be 100, but this is based on a point variance-only calculation",
    "#" : "(such as discussed in Leauthaud et al 2007).  The true SNR is somewhat lower, due to ",
    "#" : "the presence of correlation in the noise.",
    "signal_to_noise" : 100
},


"#" : "Define some other information about the images ",
"image" : {
    "type" : "Scattered",

    "size" : 3600 ,

    "nobjects" : 288,

    "#" : "This time we use stamp_size to set the size of the postage stamp image for each object.",
    "#" : "In demo9, we left it out, so GalSim automatically determined a good size for each ",
    "#" : "object.  That's usually fine, but here we just want to demonstrate the stamp_size ",
    "#" : "functionality.",
    "stamp_size" : 100,
    
    "#" : "The default convention on positions is to follow the FITS standard where the lower left",
    "#" : "pixel is called (1,1).  However, this can be counter-intuitive to people more used",
    "#" : "to C or python indexing, where indices start at 0.  So we offer the option of switching",
    "#" : "the indexing convention.  This is probably only useful if you are going to do something",
    "#" : "non-trivial with the image_pos values.",

    "#" : "If index_convention is 0 or 'C' or 'python', then the lower-left pixel is (0,0).",
    "#" : "If index_convention is 1 or 'Fortran' or 'FITS', then the lower-left pixel is (1,1).",
    "#" : "The default is 1.",
    "index_convention" : 0,

    "#" : "In demo9, we said that you can specify either stamp_image_pos or stamp_sky_pos to",
    "#" : "place each postage stamp on the full image.  If you don't specify either one, then the",
    "#" : "default is random x and y within the full image.",

    "#" : "stamp_image_pos : ",
    "#" : "    type : XY ",
    "#" : "    x : { type : Random , min : 0 , max : xsize-1 }",
    "#" : "    y : { type : Random , min : 0 , max : ysize-1 }",
    "#" : "Note: if the image_convention were 1 as is the default, then these would instead be ",
    "#" : "    min : 1 , max : {x,y}size",

    "#" : "Add correlated noise to the image -- the correlation function comes from the HST COSMOS",
    "#" : "images and is described in more detail in the ",
    "#" : "galsim.correlatednoise.getCOSMOSNoise() docstring.  This function requires a FITS",
    "#" : "file, stored in the GalSim repository, that represents this correlation information: ",
    "#" : "the path to this file must be given as file_name.",
    "noise" : {
        "type" : "COSMOS",
        "file_name" : "../examples/data/acs_I_unrot_sci_20_cf.fits",
        "#" : "Use the same pixel scale as image, reproducing COSMOS correlated noise: ",
        "dx_cosmos" : 0.20,
        "#" : "Variance sets value of zero distance correlation function: ",
        "variance" : 10000.0
    },

    "pixel_scale" : 0.20,

    "random_seed" : 24783923
},

"#" : "Define the input files",
"input" : {
    "#" : "In this case, we need to define where the real galaxy input catalog is.",
    "real_catalog" : {
        "dir" : "../examples/data",
        "file_name" : "real_galaxy_catalog_example.fits",

        "#" : "Even though we only have 5 galaxies again, preloading makes a big difference in the",
        "#" : "running time, because we are selecting among the 5 in a random order, so it helps ",
        "#" : "to have pyfits load all the images in memory and store them.",
        "preload" : "True"
    },

    "#" : "We also initialize the power spectrum here.",
    "power_spectrum" : {
        "#" : "In this case, we read the e_power_function from a file.  This is done simply by ",
        "#" : "providing the file name for the e_power_function parameter.  The input file is",
        "#" : "expected to have two columns of numbers:  k and P(k).",
        "e_power_function" : "../examples/data/cosmo-fid.zmed1.00.out",

        "#" : "The default units of k are arcsec^-1 to match all the other units.  But again,",
        "#" : "sometimes it is more convenient to define them in different units.  You may",
        "#" : "specify units = arcsec, arcmin, degrees, or radians.  The units must be ",
        "#" : "consistent for the input k and P(k), i.e., if k is in inverse radians then P must",
        "#" : " be in radians^2.",
        "units" : "radians",

        "#" : "Since we are not providing galaxy positions on a grid (e.g. in demo10, where we",
        "#" : "used a TiledImage), we need to define what grid spacing we want to use for",
        "#" : "the power spectrum realization.  GalSim will then interpolate between these ",
        "#" : "locations to the actual position of each galaxy.",
        "grid_spacing" : 90

    }
},

"#" : "Define the names and format of the output files",
"output" : {

    "dir" : "output_json",

    "#" : "Note that the filename ends in .fz.  This is the standard ending for a Rice-compressed",
    "#" : "fits file.  When GalSim sees that, it automatically applies Rice compression to the",
    "#" : "output image.",
    "file_name" : "tabulated_power_spectrum.fits.fz"
}

}

