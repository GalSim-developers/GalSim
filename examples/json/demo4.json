{
"#" : "Demo #4",

"#" : "The fourth JSON configuration file in our tutorial about using Galsim config files",
"#" : "(This file is designed to be viewed in a window 100 characters wide.)",

"#" : "This script is our first one to create multiple images.  Typically, you would want each",
"#" : "object to have at least some of its attributes vary when you are drawing multiple images",
"#" : "(although not necessarily -- you might just want different noise realization of the same",
"#" : "profile).  The easiest way to do this is to read in the properties from a catalog, which is",
"#" : "what we do in this script.  The PSF is a truncated Moffat profile, and the galaxy is bulge",
"#" : "plus disk.  Both components get many of their parameters from an input catalog.  We also",
"#" : "shift the profile by a fraction of a pixel in each direction so the effect of pixelization",
"#" : "varies among the images.  Each galaxy has the same applied shear.  The noise is simple",
"#" : "Poisson noise.  We write the images out into a multi-extension fits file.",

"#" : "New features introduced in this demo:",

"#" : "- obj type : Moffat (beta, fwhm, trunc)",
"#" : "- obj type : DeVaucouleurs (flux, half_light_radius)",
"#" : "- value type : InputCatalog (col)",
"#" : "- shift type : XY (x, y)",
"#" : "- shear type : E1E2 (e1, e2)",
"#" : "- image : xsize, ysize",
"#" : "- input : catalog (file_name, dir)",
"#" : "- output type : MultiFits (file_name, dir)",
"#" : "- Using both ellip and shear for the same object",
"#" : "- Using variables in a JSON file",

"#" : "Define the PSF profile",
"psf" : {
    "type" : "Moffat",
    "beta" : 3.5,
    "fwhm" : {
        "#" : "Parameters do not need to be constant.  There are a number of ways to",
        "#" : "specify variables that might change from object to object.",
        "#" : "In this case, the parameter specification also has a type.",
        "#" : "type = InputCatalog means read the value from a catalog:",
        "type" : "InputCatalog",

        "#" : "InputCatalog requires the extra value of which column to use in the catalog:",
        "#" : "Note: the first column is called 0, not 1, as per the usual python ",
        "#" : "0-based indexing scheme.",
        "col" : 1
    },

    "#" : "You can also specify both of these on the same line using {}",
    "trunc" : { "type" : "InputCatalog" , "col" : 4 },

    "#" : "The nesting goes as deep as it needs to",
    "ellip" : {
        "type" : "E1E2",
        "e1" : {
            "type" : "InputCatalog",
            "col" : 2
        }, 
        "e2" : {
            "type" : "InputCatalog",
            "col" : 3
        }
    },

    "#" : "If you don't specify a parameter, and there is a reasonable default, then it ",
    "#" : "will be used instead.  If there is no reasonable default, you will get an error.",
    "#" : "flux : 1  Unnecessary"
},

"#" : "Define the galaxy profile",
"gal" : {
    "type" : "Sum",

    "items" : [
        { 
            "type" : "Exponential",
            "half_light_radius" : { "type" : "InputCatalog" , "col" : 5 },
            "ellip" : {
                "type" : "E1E2",
                "e1" : { "type" : "InputCatalog" , "col" : 6 },
                "e2" : { "type" : "InputCatalog" , "col" : 7 }
            },
            "flux" : 0.6
        },
        {
            "type" : "DeVaucouleurs",
            "half_light_radius" : { "type" : "InputCatalog" , "col" : 8 },
            "ellip" : {
                "type" : "E1E2",
                "e1" : { "type" : "InputCatalog" , "col" : 9 },
                "e2" : { "type" : "InputCatalog" , "col" : 10 }
            },
            "flux" : 0.4
        }
    ],

    "flux" : 1e6,

    "#" : "An object may have an ellip and a shear, each of which can be specified in terms",
    "#" : "of either E1E2 (distortion) or G1G2 (reduced shear).",
    "#" : "The only difference between the two is if there is also a rotation specified.",
    "#" : "The order of the various modifications are:",
    "#" : "- ellip",
    "#" : "- rotation",
    "#" : "- shear",
    "#" : "- shift",
    "shear" : {
        "type" : "G1G2",
        "g1" : -0.009,
        "g2" : 0.011
    },

    "shift" : {
        "type" : "XY",
        "x" : { "type" : "InputCatalog" , "col" : 11 },
        "y" : { "type" : "InputCatalog" , "col" : 12 }
    }
},

"#" : "Define some other information about the images ",
"image" : {
    "pixel_scale" : 1.0,
    "xsize" : 64,
    "ysize" : 64,

    "#" : "Define what kind of noise to use",
    "noise" : {
        "#" : "Since the default type is CCDNoise, we may omit it.",
        "sky_level" : 1e6
    },

    "#" : "Define the initial random number seed",
    "random_seed" : 8241573
},

"#" : "Define the input files",
"input" : {
    "#" : "In this case, we just have a catalog to read in.",
    "catalog" : {
        "dir" : "input",
        "file_name" : "galsim_default_input.asc"
    }
},

"#" : "Define the name and format of the output file",
"output" : {
    "#" : "type = MultiFits means to use a multi-extension fits file",
    "type" : "MultiFits",

    "dir" : "output_json",
    "file_name" : "multi.fits",
    
    "#" : "You can specify how many extensions to write to the file with nimages, ",
    "#" : "but in this case, since we are using an input catalog, the default ",
    "#" : "value is to do the number of entries in the catalog.",
    "#" : "nimages : 100"
}

}
