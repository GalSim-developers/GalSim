{
"#" : "Demo #9",

"#" : "The ninth JSON configuration file in our tutorial about using Galsim config files",
"#" : "(This file is designed to be viewed in a window 100 characters wide.)",

"#" : "This script simulates cluster lensing or galaxy-galaxy lensing.  The gravitational shear ",
"#" : "applied to each galaxy is calculated for an NFW halo mass profile.  We simulate observations ",
"#" : "of galaxies around 20 different clusters -- 5 each of 4 different masses.  Each cluster",
"#" : "has its own file, organized into 4 directories (one for each mass).  For each cluster, we",
"#" : "draw 20 lensed galaxies at random positions on the image.",

"#" : "New features introduced in this demo:",

"#" : "- shear_value : NFWHaloShear (redshift)",
"#" : "- float_value : NFWHaloMagnification (redshift)",
"#" : "- input : nfw_halo (mass, conc, redshift)",
"#" : "- shear_value : Eta1Eta2 (eta1, eta2)",
"#" : "- image type : Scattered (size, nobjects)",
"#" : "- str_value type : NumberedFile (root, num, ext, digits)",
"#" : "- str_value type : FormattedStr (format, items)",
"#" : "- pos_value type : RandomCircle (..., inner_radius)",
"#" : "- value type : Sequence (..., nitems)",
"#" : "- output : nproc",
"#" : "- output : weight",
"#" : "- output : badpix",


"#" : "We again use the multiple document feature.  So start with the common information:",

"#" : "Define the PSF profile",
"psf" : {
    "type" : "Kolmogorov",
    "fwhm" : 0.5 
},

"#" : "Define the galaxy profile",
"gal" : {
    "#" : "Note: The randomized positions are specifyed below with image.type = Scattered",
    "#" : "rather than gal.shift as we used in demo4 and demo5.  The gal.shift field should be ",
    "#" : "reserved for shifts of a few pixels or less, nor for setting the position of the ",
    "#" : "object in a large image.",

    "type" : "Exponential",
    "half_light_radius" : { "type" : "Random" , "min" : 0.4 , "max" : 1.2 },
    "flux" : { "type" : "Random" , "min" : 1.0e4 , "max" : 1.0e6 },
    "ellip" : {
        "#" : "The eta definition of shear is |eta| = ln(a/b) where a and b are (as usual)",
        "#" : "the semi-major and semi-minor axes.  This definition has the advantage that ",
        "#" : "it is well defined for all values from 0 to infinity, so we don't need to",
        "#" : "cut it off to avoid |e| > 1.",
        "type" : "Eta1Eta2",
        "eta1" : { "type" : "RandomGaussian" , "sigma" : 0.4 },
        "eta2" : { "type" : "RandomGaussian" , "sigma" : 0.4 }
    },

    "magnification" : {
        "#" : "For this demo, we use a model of an NFW halo for our magnification and shear.",
        "#" : "Both require that the galaxy have a redshift attribute.",
        "#" : "We put the redshift at the gal level, rather than here, since we want to use the ",
        "#" : "same value for both mag and shear.",
        "#" : "They also require an input.nfw_halo field.  See below.",
        "type" : "NFWHaloMagnification"
    },

    "shear": {
        "type" : "NFWHaloShear"
    },

    "#" : "Note: the redshift could be variable for each galaxy.  We just use a constant here.",
    "redshift" : 0.6 
},


"#" : "Setup the NFW Halo:",
"#" : "This isn't really an input in the normal sense, but we put in input anything that ",
"#" : "requires an initial setup.  That includes setting up the NFW Halo parameters.",
"input" : {
    "nfw_halo" : {
        "#" : "Note: the input field gets processed each time we start a new output file",
        "#" : "So any non-constant variables here will change with that cadence.",
        "#" : "For our mass, we use each value for 5 sequential files, then change",
        "#" : "to the next mass in the list.",
        "mass" : {
            "type" : "List",
            "items" : [ 1.0e15, 7.0e14, 4.0e14, 2.0e14 ],
            "index" : {
                "type" : "Sequence",
                "repeat" : 5
            }
        },

        "#" : "The concentration parameter = virial radius / NFW scale radius",
        "conc" : 4, 

        "#" : "The redshift of the halo.",
        "redshift" : 0.3,

        "#" : "These next two are optional. If they are omitted, then (0.3, 0.7) are actually the",
        "#" : "defaults. If you only specify one of them, the other is set so that the total is 1.",
        "#" : "But you can define both values so that the total is not 1 if you want.",
        "#" : "Radiation is assumed to be zero and dark energy equation of state w = -1.",
        "#" : "If you want to include either radiation or more complicated dark energy models,",
        "#" : "you'll need to define your own cosmology class and use that in a Python script.",
        "#" : "There is no way to include them currently from a config script.",
        "omega_m" : 0.3,
        "omega_lam" : 0.7,

        "#" : "Another optional parameter for nfw_halo is halo_pos, which specifies the location",
        "#" : "of the halo with respect to the center of the image.  The default is (0,0).",
        "#" : "halo_pos : 0,0"
    }
},

"#" : "Define some other information about the images ",
"image" : {

    "#" : "A Scattered image means that the objects can be placed arbitrarily at any (x,y) value.",
    "type" : "Scattered",

    "#" : "Either size or (xsize,ysize) is required to specify the size of the image.",
    "size" : 512,

    "#" : "nobjects is required to specify how many objects to place on the image.",
    "nobjects" : 20,

    "#" : "You can optionally specify stamp_size or (stamp_xsize,stamp_ysize) to set the size of",
    "#" : "the postage stamp image to draw for each object.  However, if you omit these,",
    "#" : "then GalSim will automatically determine a good size to draw each object -- larger",
    "#" : "for larger objects, and smaller for smaller ones.  So this is usually the way to go.",
    
    "#" : "There are two ways to specify the location of each postage stamp on the full image.",
    "#" : "You may specify:",
    "#" : "  image_pos = the position in pixels on the full image",
    "#" : "  sky_pos   = the position in arcsec (or whatever sky units you are using) relative",
    "#" : "              to the center of the image",

    "#" : "The difference between these and gal.shift is that gal.shift moves the object with ",
    "#" : "respect to the center of the postage stamp, while these set the position of the ",
    "#" : "postage stamp on the larger full image.",

    "#" : "In this case we use stamp_sky_pos to place each object in sky coordinates relative to",
    "#" : "the center of the image.  We use RandomCircle with an inner radius to avoid placing",
    "#" : "galaxies too close to the halo center where the lensing is not weak.",
    "sky_pos" : {
        "type" : "RandomCircle",
        "radius" : 50,
        "inner_radius" : 10
    },

    "pixel_scale" : 0.20,

    "noise" : {
        "sky_level" : 1.0e6
    },

    "random_seed" : 8383721
},

"#" : "Define the names and format of the output files",
"output" : {

    "nfiles" : 20,

    "file_name" : {

        "#" : "A NumberedFile type creates a string of the form rootNNNNext",
        "#" : "where the NNNN is a number that will typically be drawn from a Sequence.",
        "#" : "In our case, our file_name's will be:",
        "#" : "    cluster0001.fits",
        "#" : "    cluster0002.fits",
        "#" : "    cluster0003.fits",
        "#" : "    cluster0004.fits",
        "#" : "    cluster0005.fits",
        "type" : "NumberedFile",

        "#" : "root specifies the text to go before the number",
        "root" : "cluster",

        "#" : "num specifies how to choose the number for each file. ",
        "#" : "If omitted, the default is simply a Sequence starting at 1.",
        "#" : "i.e. num : { type : Sequence , first : 1 }",
        "#" : "However, we want the sequence to start over every 5 files, so we need to define it.",
        "num" : {
            "type" : "Sequence",
            "first" : 0,
            "#" : "An alternate way to set the number of items in a Sequence is nitems instead of",
            "#" : "last.  Here, last = nitems-1.",
            "nitems" : 5
        },

        "#" : "ext specifies the text to go after the number, if desired.",
        "#" : "The extension is usually set to a reasonable default.",
        "#" : "For output.file_name, the default is '.fits'.",
        "#" : "For an input ASCII catalog, the default is '.asc'.",
        "#" : "For anything else (e.g. dir below) the default is '' (no extension)",
        "#" :"ext : .fits",

        "#" : "digits specifies how many digits to use in writing the number.  The default is",
        "#" : "to use as many as necessary, but if your numbers go above 9, then this makes",
        "#" : "the file names appear out of order in a directory listing.  So it is common ",
        "#" : "practice to pad the smaller numbers with 0's so file0099 will appear before ",
        "#" : "file0100.",
        "digits" : 4
    },


    "dir" : {
        "#" : "Our directory names wil be:",
        "#" : "    nfw1",
        "#" : "    nfw2",
        "#" : "    nfw3",
        "#" : "    nfw4",
        "#" : "as subdirectories of output_json.",
        "#" : "",
        "#" : "This could be done using NumberedFile with ",
        "#" : "    type : NumberedFile",
        "#" : "    root : 'output_json/nfw'",
        "#" : "    num : <the same as the single item below>",
        "#" : "",
        "#" : "however, we use FormattedStr instead to show how that works.",
        "type" : "FormattedStr",

        "#" : "The FormattedStr takes a format string and a list of items to use for ",
        "#" : "the various %d, %f, etc.  In other words, once we construct a list of items,",
        "#" : "the final string is calculated using",
        "#" : "    format%tuple(items)",
        "format" : "output_json/nfw%d",

        "#" : "Only one item in this case, but in general you would have an item for each",
        "#" : "% specified in the format string (except %% of course which is interpreted",
        "#" : "as a literal '%').",
        "items" : [  {
            "type" : "Sequence",
            "first" : 1,
            "last" : 4,

            "#" : "For our directory name, we have each number in the sequence repeat 5 times",
            "#" : "before moving on to the next value, since we have 5 files to put in each ",
            "#" : "directory.",
            "repeat" : 5
            } ]
    },

    "#" : "The weight field means that a weight image should be built and written out.",
    "#" : "The weights are calculated as the inverse variance in each pixel.",
    "weight" : {
        "#" : "Either file_name or hdu is required for weight.  In this case we write to the ",
        "#" : "first HDU extension.  The main image is in the primary HDU, which is number 0.",
        "#" : "Note: it is an error to skip HDU's, so if weight is the only other image, it must ",
        "#" : "be in HDU 1.  If weight, badpix and psf all specify an HDU value, then they must be",
        "#" : "1, 2 and 3 in some order.",
        "#" : "Also, hdu is only valid for image.type = Fits (which is the default).",
        "hdu" : 2,

        "#" : "The default behavior for a weight image is to not include the Poisson noise from",
        "#" : "the objects themselves, but rather just the variance from the sky and read_noise.",
        "#" : "If you would rather include the object noise, change this to True.",
        "#":"include_obj_var : False"
    },

    "#" : "It is common for astrometric images to also have a bad pixel mask.  We don't have any",
    "#" : "defect simulation currently, so our bad pixel masks are currently all zeros. ",
    "#" : "But someday, we plan to add defect functionality to GalSim, at which point, we'll",
    "#" : "be able to mark those defects on a bad pixel mask.",
    "badpix" : {
        "hdu" : 1
    },

    "#" : "nproc in the output field indicates that multiple processes should be used to ",
    "#" : "build the files.  This is a much more efficient way to parallelize than putting",
    "#" : "nproc in the image field (as in demo8.json), since it requires less communication ",
    "#" : "between the processes.  Unless you are building enormous files such that only one",
    "#" : "at a time can fit in memory, this will be the normal way you'll want to parallelize.",

    "#" : "Also, this time, we set nproc <= 0.  This means that GalSim should try to automatically",
    "#" : "determine the number of CPUs you have and use that many processes.",
    "nproc" : -1
}

}
