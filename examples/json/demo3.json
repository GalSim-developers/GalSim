{
"#" : "Demo #3",

"#" : "The third JSON configuration file in our tutorial about using Galsim config files",
"#" : "(This file is designed to be viewed in a window 100 characters wide.)",
  
"#" : "This script is getting reasonably close to including all the principal features of an image",
"#" : "from a ground-based telescope.  The galaxy is a bulge plus disk, where each component is ",
"#" : "a sheared Sersic profile (with different Sersic indices).  The PSF has both atmospheric and",
"#" : "optical components.  The atmospheric component is a Kolmogorov turbulent spectrum.",
"#" : "The optical component includes defocus, coma and astigmatism, as well as obscuration from",
"#" : "a secondary mirror.  The noise model includes both a gain and read noise.  And finally,",
"#" : "we include the effect of a slight telescope distortion.",
      
"#" : "New features introduced in this demo:",

"#" : "- obj type : Sum (items)",
"#" : "- obj type : Convolve (items)",
"#" : "- obj type : Sersic (flux, n, half_light_radius)",
"#" : "- obj type : Kolmogorov (fwhm)",
"#" : "- obj type : OpticalPSF (lam_over_diam, defocus, coma1, coma2, astig1, astig2, obscuration)",
"#" : "- shear type : QBeta (q, beta) -- including how to specify an angle",
"#" : "- shear type : EBeta (q, beta) ",
"#" : "- noise type : CCDNoise (sky_level, gain, read_noise)",
"#" : "- image : size",
"#" : "- image : wcs (shear)",
"#" : "- output : psf",
    
"#" : "Define the galaxy profile",
"gal" : {
    "#" : "This galaxy will be the sum of a bulge component and a disk component",
    "type" : "Sum",

    "#" : "Any number of items may be added together, so we specify them in a list.",
    "#" : "A list is specified using square brackets with commas separating each item.",
    "#" : "In this case, each item is a dict of key:value pairs for that component.",
    "#" : "Note: Each item in the Sum can have its own separate shear.  See demo4 for an example.",
    "items" : [
        {
            "#" : "First the bulge:",
            "type" : "Sersic",
            "n" : 3.5,
            "half_light_radius" : 2.3,
	    "#" : "flux here is used to mean fractional flux",
            "flux" : 0.3 
        }, 
        {
            "#" : "Now the disk:",
            "type" : "Sersic",
            "n" : 1.5 ,
            "half_light_radius" : 3.7,
            "flux" : 0.7
        }
    ],

    "shear" :  {
        "#" : "QBeta means to use the axis ratio (q = b/a) and a position angle.",
        "type" : "QBeta",
        "q" : 0.73,
        "#" : "For angles, you must let GalSim know which units you intend.",
        "#" : "So the number must be followed by either degrees or radians",
        "#" : "(or arcminutes or arcseconds if you prefer).",
        "#" : "These may be abbreviated to deg and rad (and  arcmin, arcsec).",
        "beta" : "23 degrees"
    },

    "#" : "The flux here also applies to the full galaxy object.",
    "flux" : 1e6
},
 
"#" : "Define the PSF profile",
"psf" : {
    "#" : "This PSF will be the convolution of an atmospheric component and an optical component.",
    "type" : "Convolution",

    "#" : "Any number of items may be convolved together, so we specify them in a list.",
    "#" : "Use one bullet for each item.",
    "items" : [
        {
            "#" : "For the atmospheric component, we use a Kolmogorov spectrum",
            "type" : "Kolmogorov",
            "fwhm" : 2.1,

            "#" : "A shear at this level just applies to this component.",
            "ellip" : {
                "type" : "EBeta",
                "e" : 0.13,
                "beta" : "0.81 radians"
            }
        },
        {
            "#" : "For the optical component, GalSim provides an OpticalPSF class that ",
            "#" : "implements the PSF pattern from various telescope aberrations.",
            "type" : "OpticalPSF",

            "#" : "Use value for lambda = 800 nm, D = 4 m",
            "#" : "lam_over_diam = (800 nm) * 1.e-9 (m/nm) / (4m) * (206265 arcsec/radian)",
            "#" : "              = 0.041253 arcsec",
            "#" : "You can have python do the arithmetic for you using the Eval type.",
            "#" : "The string given by str will be evaluated using the Python eval(str) function.",
            "lam_over_diam" : {
                "type" : "Eval",
                "str" : "800 * 1.e-9 / 4 * 206265"
            },
            "#" : "lam_over_diam : 0.041253",

            "#" : "The rest of these values are given in units of lambda",
            "defocus" : 0.53,
            "astig1" : -0.29,
            "astig2" : 0.12,
            "coma1" : 0.64,
            "coma2" : -0.33,

            "#" : "The linear scale of the secondary mirror obstruction",
            "#" : "as a fraction of the primary mirror size",
            "obscuration" : 0.3
        }
    ]
},

"#" : "Define some other information about the images",
"image" : {
    "pixel_scale" : 0.23,
    "size" : 64,
    "#" : "(You can also specify xsize and ysize separately for non-square images.)",
   
    "#" : "You may provide a WCS to be applied to the image.",
    "#" : "In this case, we simply have a constant telescope distortion over the image.",
    "wcs" : {
        "#" : "Eventually, we will have more sophisticated options for the WCS, but for now,",
        "#" : "the only valid type is Shear (which is the default, so can be left unspecified),",
        "#" : "which just takes a given shear value for the telescope distortion.",
        "shear" : {
            "type" : "G1G2",
            "g1" : -0.02,
            "g2" : 0.01
        }
    },

    "noise" : {
        "#" : "The CCDNoise type has the potential to be more sophisticated than just a ",
        "#" : "simple Poisson noise according to the flux of sky + object.",
        "#" : "You can also specify a gain and a read_noise for the CCD.",
        "#" : "The gain indicates how many photons (or electrons, technically) correspond",
        "#" : "to each final ADU.  And the read_noise is an additional Gaussian noise",
        "#" : "(specified as the sigma or rms value) to be added to each pixel at the end.",
        "type" : "CCDNoise",
        "sky_level" : 2.5e4,
        "gain" : 1.7,
        "read_noise" : 0.3
    },

    "#" : "If you want the random values to be deterministic, you can provide an initial seed.",
    "#" : "If this isn't set, then it will use the current time to create an initial seed.",
    "random_seed" : 1314662
},

"#" : "Define the name and format of the output file",
"output" : {
    "dir" : "output_json",
    "file_name" : "demo3.fits",
    
    "#" : "Sometimes it is useful to have the PSF image also written to a file.",
    "#" : "The PSF image will always have the same pixel centering as the galaxy, and if there ",
    "#" : "was any random component to the PSF generation, then this will be the exact same PSF",
    "#" : "that was used for the galaxy.  Plus, there is no noise in the PSF image.",
    "psf" : {
        "#" : "You may either specify a new file_name as we do here, or you can specify",
        "#" : "hdu to put the PSF image in the same fits file, but in another HDU.",
        "file_name" : "demo3_epsf.fits"
    }
}

}
