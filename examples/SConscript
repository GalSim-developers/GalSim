# vim: set filetype=python :

import SCons
import os

Import('env')

libs=['galsim']

env1 = env.Clone(CPPDEFINES=[],LIBS=libs+env['LIBS'])

env1['OBJPREFIX'] = '.obj/'

bin_dir = 'bin'
bin_install_dir = os.path.join(env['INSTALL_PREFIX'], bin_dir)

lib_dir = 'lib'
lib_install_dir = os.path.join(env['INSTALL_PREFIX'], lib_dir)

# Include the library location within the executable.
if 'install' in COMMAND_LINE_TARGETS:
    env1.Append( RPATH = Dir(lib_install_dir).abspath )
else:
    env1.Append( RPATH = Dir('#lib').abspath )

# Workaround for SCons bug: The above doesn't always work correctly.
# RPATH clashes with LINKFLAGS.  So if LINKFLAGS is already set, we need this workaround.
# See: http://scons.tigris.org/issues/show_bug.cgi?id=1644
# Fixed in version 2.1.
major , minor , junk = SCons.__version__.split('.',2)
if major < 2 or (major == 2 and minor == 0):
    env1.Append( LINKFLAGS = ["$__RPATH"] )

sbdraw = env1.Program(os.path.join('#bin','sbdraw'), 'SBDraw.cpp')

int_example = env1.Program(os.path.join('#bin','int_example'), 'IntExample.cpp')

meas_shape = env1.Program(os.path.join('#bin','MeasShape'), 'MeasShape.cpp')

meas_moments = env1.Program(os.path.join('#bin','MeasMoments'), 'MeasMoments.cpp')

test_random = env1.Program(os.path.join('#bin','test_random'), 'testRandom.cpp')

example_targets = [ sbdraw, int_example, meas_shape, meas_moments, test_random ]

env.Alias(target='examples',source=example_targets)

# I think we don't actually want to install the example programs.
# But here is how we would do it for real programs that the user will want
# to have installed:
if 'install' in COMMAND_LINE_TARGETS:

    installed_bin = env1.Install(dir=bin_install_dir, source=example_targets)
    env1.Alias(target='install', source=installed_bin)


if 'uninstall' in COMMAND_LINE_TARGETS:
    # There is no env.Uninstall method, we must build our own
    deltarget = Delete("$TARGET")

    binfiles = [os.path.join(bin_install_dir, os.path.basename(str(f[0]))) for f in example_targets]

    for f in binfiles:
        env1.Alias('uninstall', env1.Command(f, None, deltarget))


