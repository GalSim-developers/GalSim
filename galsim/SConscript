# vim: set filetype=python :

import os
import sys
import glob

Import('env')
ReadFileList=env['__readfunc']

python_dir = 'galsim'
python_install_dir = os.path.join(env['PYPREFIX'], python_dir)

py_files = glob.glob("*.py")

subdir_list = [ 'config' ]

py_files_sub = []
python_install_subdir = []
for subdir in subdir_list:
    py_files_sub.append(glob.glob(os.path.join("config","*.py")))
    python_install_subdir.append(os.path.join(python_install_dir,"config"))

# If the python_install_dir being used isn't in the sys.path, then warn the user
# that they should add that path to their PYTHONPATH environment variable.
def CheckPyPrefix(target, source, env):
    import subprocess

    # Get sys.path for the intended python version.
    python = env['PYTHON']
    cmd = "%s -c \"import sys; print sys.path\""%python
    p = subprocess.Popen([cmd],stdout=subprocess.PIPE,shell=True)
    sys_path = p.stdout.read().strip()
    sys_path = eval(sys_path)

    # Convert everything to an abspath to make sure everyone is using the same notation.
    pyprefix = os.path.abspath(env['PYPREFIX'])
    sys_path = [ os.path.abspath(d) for d in sys_path ]

    # If installing into a staging area, try stripping off an initial INSTALL_PREFIX
    # from pyprefix and put on FINAL_PREFIX instead.
    if ( pyprefix not in sys_path and 
         env['FINAL_PREFIX'] != env['INSTALL_PREFIX'] and 
         pyprefix.startswith(env['INSTALL_PREFIX']) ):
        pyprefix = pyprefix.replace(env['INSTALL_PREFIX'],env['FINAL_PREFIX'],1)
        
    if pyprefix not in sys_path:
        print
        print 'WARNING: The python installation prefix: %s'%pyprefix
        print '         is not in the search path for %s.'%python
        print
        print '         You should add this directory to your PYTHONPATH environment'
        print '         variable so python will find the installed galsim modules.'
        print
        print '         For example, if you use bash, you should add the line:'
        print '             export PYTHONPATH=$PYTHONPATH:%s'%pyprefix
        print '         to your .bashrc or .bash_profile file.'
        print

env['BUILDERS']['CheckPyPrefix'] = Builder(action = CheckPyPrefix)

if 'install' in COMMAND_LINE_TARGETS:

    installed_py = env.Install(dir=python_install_dir, source=py_files)

    for i in range(len(subdir_list)):
        installed_py += env.Install(dir=python_install_subdir[i], source=py_files_sub[i])

    env.Alias(target='install', source=installed_py)

    check = env.CheckPyPrefix(target='#/check', source=None)
    Depends(check,[installed_py, '#pysrc', '#bin', python_install_dir])
    AlwaysBuild(check)
    env.Alias(target='install', source=check)


if 'uninstall' in COMMAND_LINE_TARGETS:
    # There is no env.Uninstall method, we must build our own
    # MJ: The scons delete function doesn't actually delete directories a la rm -rf
    # I think this is a feature they will add someday, so maybe not worth worrying about it.
    # but if we really want the galsim directory to be deleted on an uninstall, we
    # should change this.  Proabaly roll our own Delete function.
    deltarget = Delete("$TARGET")

    for f in py_files:
        env.Alias('uninstall', env.Command(os.path.join(python_install_dir, f), None, deltarget))

    for i in range(len(subdir_list)):
        for f in py_files_sub[i]:
            env.Alias('uninstall', env.Command(os.path.join(python_install_subdir[i], f), 
                      None, deltarget))

