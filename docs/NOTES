Notes for me, Barney, Rachel... on dump of SBProfile code.
17 Jan 2012 Gary B

GENERAL:
What I've assembled here is meant to be a starting point for you (or anyone else interested) to start understanding the code, and to seed a new repository.  I've cleaned up the Makefiles so it's clear to you what is being done (I hope) but have tried to make anything bomb-proof because I assume that switching to a better build system will be one of the first orders of business.

I expect this to be the point at which my code is permanently forked!  But I would appreciate if the initial checkin for a new repository were a faithful version of this code so that I can track changes.


BUILDING:

This directory tree contains what is needed to build a functional version of two codes:
Shera - code that mimics Shera operations on COSMOS cutouts provided by Rachel
SBDraw - code that produces a FITS image of any SBProfile that can be specified by a string understood
  by the SB parser.

I believe I have set up the Makefiles to work generically once you've done the following:
* Set the FFTW_PATH, CFITSIO_PATH, and TMV_PATH variables to your local installations
* Set CXX and OPTFLAGS as you need
* Alter the libraries needed for linking with TMV - search near TMVLINK in Makefile.

I have also put three flags into the Makefile that, if you un-set them, will bypass chunks of code that introduce dependencies on things we may not want:

USE_LAGUERRE - unset this to skip the SBLaguerre class and all of the Gauss-Laguerre code (sbprofile/Laguerre.*).  This is also where (nearly) all of the essential uses of TMV occur.  Both top-level executables will build and run if you undefine this.
USE_IMAGES - unset this to skip all code that makes use of my Image and FITSImage classes, so you're no longer dependent on anything in the images subdirectory nor on CFITSIO.  Of course you will no longer be able to build Shera or SBDraw or anything that produces or reads images, but at least you'll be able to see if the code compiles.  Also when/if you change to using a different image class (e.g. some Python array), you can search the sbprofile code for "#ifdef USE_IMAGES" to find every place where changes might be needed.
USE_TMV - unset this to skip all routines that make use of TMV classes (USE_TMV is set automatically if you set USE_LAGUERRE).  But not quite: SBInterpolatedImage.h / SBInterpolatedImage.cpp use TMV in a way that was not trivially changed, so in fact if you un-set this your compilations will fail.  I can fix this easily but did not bother, given that you intend to use TMV.

Once things are set up the way you want, you should be able to just
make clean
make
(... or: make subs just to compile subroutines; make Shera or make SBDraw for one target only).
There is no make install, you just have executables in the root directory.

RUNNING:

Once you've built, try this:
./SBDraw "sersic 2 4 S 0.2 0.2 * gauss 2" test.fits

You should get back a FITS file "test.fits" that contains an image of an n=2 Sersic profile with r_e=4, sheared by e=(0.2, 0.2), convolved with a sigma=2 Gaussian PSF.  Note the location of the center will agree with the FFT class convention described below.

EXTRA GOODIES:

In the utilities2 directory are a few classes that are not invoked now but could be useful:
Pset.h / Pset.cpp: Easy way to turn program variables into parameters that are set/saved by standard-formt ASCII files.
AstronomicalConstants.h: just what you'd think
Random.h:  version of Numerical Recipes random-number generator(s) with nice C++ features, like seeding upon creation of object, and overloading of conversion to double that will draw a new random number.
Stopwatch.h: wall-clock timer

DOCUMENTATION:
I've put SBProfile.tex (and resultant SBProfile.pdf) in this package, which document the class design and the parser.  Have not documented SBInterpolatedImage yet.
finterp.pdf is draft paper describing why the interpolation in SBInterpolatedImage is done the way it is.
images/images.txt is some documentation on my Image class, which you may want to discard.

TO DO:

1) SBProfile architecture changes might include making all SBProfile classes immutable and instituting reference-counting so that it's unnecessary to make duplicates of "ingredients" when building SBConvolve, SBDistort, etc.  Just need to be careful when doing this about thread safety - want to be able to use any of these classes in read-only mode.

2) Be sure everyone knows about conventions in Shear.h or somehow change the class.  Also be sure things are clear & consistent about the fact that the classes define *surface brightness* manipulations, so pixel values are always sb's, not fluxes.  To get a flux you need to multiply by pixel area.  The various transformations have conventions about what's conserved: total flux or central surface brightness.

3) Need to add the photon-shooting routines.

4) Write generic SBProfile1d that takes radial function as argument (plus probably some estimate of half-light radius of that function), and can tabulate its Hankel transform (for kValue's) and the inverse of its cumulative light distribution (for photon shooting).

5) Replace all Image<> uses with image format chosen for GREAT3.  Note that my Image<> can have arbitrary indexing, does not need to start at (1,1) or (0,0).  The fft wrapper assumes that x-domain images always go from -N/2 to N/2-1 (and that N is always even).

6) isAnalyticK() must be true for classes to work now; would not be true if we had an SBFlexion.  So decide whether to remove it from interface, if it always has to be true; or think ahead to how SBFlexion would be written.

7) Get rid of SBProfile::setCentroid() since it is not going to be implemented in most cases.  Use the shift() method instead.  ALREADY DID THIS!

8) Think about the defaults for padding and interpolating of SBInterpolatedImage.

9) Change the fill[XK]grid methods to allow filling non-square grids efficiently.

10) Add SBInterpolatedImage to the parser.

11) Write an SBFlexion someday.

12) Multi-threading: would need to protect cached elements from data races to make sure we can use SBP's in read-only mode in parallel threads.  Also need to consider how the FFTW "wisdom" is handled in fft classes.

13) Could replace the TMV usage in SBInterpolatedImage with some other matrix package if desired, but right now it makes good use of TMV's operator overloading so the code is more readable without this change.

14) I'm sure there will be more!
